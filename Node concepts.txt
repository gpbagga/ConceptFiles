///////IMPROTANT about node///////
Node is a C++ program that have environment to give objects and v8 engine (used by Chrome) to execute javascript code
/////////////////

//////Executing Javascript code or Node project///////////
node filename.js            // this command executes the code and loads the module in computer processor instead of a browser 
//////////////////////


//////////Event module///////////
ALWAYS REGISTER LISTENERS BEFORE CALLING EMIT METHOD
when we call emit method, emitter object iterates over all registered listeners and execute all listeners synchronously
////////////////


//////package.json/////////////
to make package.json file write: npm init --yes
///////////////

//// fs (filesystem) /////
path should be like : fs.readFile("./config.js",callback);
/////////////

///axios////
axios.get('/user/12345')
  .catch(function (error) {
    console.log(error) ///this is the string returned by the toString method of the error object.
    if (error.response) {
      // The request was made and the server responded with a status code
      // that falls out of the range of 2xx
      console.log(error.response.data);
      console.log(error.response.status);
      console.log(error.response.headers);
    } else if (error.request) {
      // The request was made but no response was received
      // `error.request` is an instance of XMLHttpRequest in the browser and an instance of
      // http.ClientRequest in node.js
      console.log(error.request);
    } else {
      // Something happened in setting up the request that triggered an Error
      console.log('Error', error.message);
    }
    console.log(error.config);
  });
///////////////////

////// to install a npm library globally, use -g flag 


////////Setting PORT environment variable in VSCODE//////////
VSCODE uses powershell terminal so PORT is changed by:
1. Set-Location Env:
2. Set-Content -Path PORT -Value port-value
3. change location to your project by typing DriveName:    (drive where your project folder is stored)
//////////////////////


//////////nodemon//////////
using nodemon instead of node like -> nodemon app.js 
will reflect the saved changes instead of executing the node command again and again
///////////////////


///////global objects and functions by node/////
global -> global object available in node apps
console.log or global.console.log
setTimeout() or global.setTimeout()
clearTimeout() or global.clearTimeout()
setInterval() or global.setInterval()
clearInterval() or global.clearInterval()
////////////////////

//////NOTE: variables and functions in js files are not global or put into global object given by node because they are just limited to respective js file///////////

/////////Node Modular System///////
Each .js file in node app is a module called main module accesed by the object 'module' (only available inside module) (e.g. console.log(module))
and variables and functions in that module are not available outside of the module
To give access to them you have to explicitly export them.

//////Exporting a variable or function or making it public in CJS//////
module.exports.variableName = variable
module.exports.funcName = function
or
module.exports = variable or function
/////////////////////////////////////////////


///////Loading a module and accessing their public fields//////////
const moduleObj = require('./filename')
or
const variableName = require('./filename')..........in case if we exported variable directly

////////////////////////

/////////require()////////
require() can take relative path to a filename or built-in modules of node as its parameter
//////////////

/////REST Api////////////
A REST API (also known as RESTful API) is an application programming interface (API or web API) that conforms to the 
constraints of REST architectural style and allows for interaction with RESTful web services.
To know more, check https://www.youtube.com/watch?v=SLwpqD8n3d0

a request object has many props like params, headers, body etc.

404 : status code of error - 'resource not found'
200: status code of all ok
400: Bad Request

'operations': 'Requests'
Create: POST, 
Read: GET, 
Update: PUT,
Delete: DELETE

///////////////////////////

////////You can convert cjs script to esm script by writing "type":"module" in package.json file


//////////EXPRESS///////////////
express() create an http server and returns an object which has different methods

app.use(express.json())
// express.json() returns a piece of middleware. app.use means we want to use middleware in request processing pipeline
// So this statement automatically parses json object in request processing pipeline

By default, 'req.body' is undefined, and is populated when you use body-parsing middleware such as express.json() or 
express.urlencoded().

///////////////////////////////////////

//// Inline functions //////////
Unlike normal function, they are created at runtime. For more info:
https://www.geeksforgeeks.org/what-is-the-inline-function-in-javascript/
////////////

/////////////////////////
One big difference between Node.js modules and browser JavaScript is how one script's code is accessed from another script's code.

In browser JavaScript, scripts are added via the <script> element. When they execute, they all have direct access to the global scope, a "shared space" among all scripts. Any script can freely define/modify/remove/call anything on the global scope.

In Node.js, each module has its own scope. A module cannot directly access things defined in another module unless it chooses to expose them. To expose things from a module, they must be assigned to exports or module.exports. For a module to access another module's exports or module.exports, it must use require().
////////////////////////////////////

///// serve-index //////////
expressApp.use('/', serveIndex('app'));   
serveIndex means serve index file in 'app' directory like index.html
////////

//// Node Project Structure or architecture ////

app.js :-- our application entry point
SrC
-api-routes  :-- application routes
-config      :-- environment variables
-loaders	    :-- loaders for startup modules
-models     :-- database models
-services    :-- business logic
-subscribers  :-- async task event handlers
-scripts     :-- for long npm scripts

///////////////

//// kill port already in use /////
command: netstat -ano | findstr :<PORT>
You will get pid
command: taskkill /PID <PID> /F
///////////////

//// file upload /////
Client side code: 
const blob = dataURLtoBlob(dataURIstring)
      console.log(blob)
      const formData = new FormData()
      formData.append('avatar', blob, "hello.pdf")
      axios.post('http://localhost:1000/profile', formData)
      .then((res)=> console.log(res.data))

Server side code: 
Make uploads folder
const multer = require('multer')
const upload = multer({dest: 'uploads/'})
app.post('/profile', upload.single('avatar'), (req, res)=>{
  console.log(req.file)
  console.log('got file')
  res.send('got file')
})

///////////////


//// javascript arrays ///
JavaScript has no associative arrays, just objects. Even JavaScript arrays are basically just objects, just with the special thing that the keys are numbers (0,1,...).

So look at your code first:

var myArray = []; // Creating a new array object
myArray['a'] = 200; // Setting the attribute a to 200
myArray['b'] = 300; // Setting the attribute b to 300
It's important to understand that myArray['a'] = 200; is identical to myArray.a = 200;!
/////////////////

