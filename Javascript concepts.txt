////async functions/////
they are executed as inline function to the statement before await statement
//////////////////////////////////


//////////////Method definitions in objects/////////////////////////

Whenver we define a function in class or object then it is called 'method'

const obj = {
  foo: function() {
    // ...
  },
  bar: function() {
    // ...
  }
}
You are now able to shorten this to:
const obj = {
  foo() {
    // ...
  },
  bar() {
    // ...
  }
}
////////////////////////////


/////OOPS concept///////////
CODE REUSABILITY is the reason behind INHERITANCE
To extend or inherit a class means to use its properties and methods
Object of child class can access public fields of super or extended class
///////////////////////////////////////////////

/////CLOSURES in JAVASCRIPT //////////

//// Inline functions //////////
Unlike normal function, they are created at runtime. For more info:
https://www.geeksforgeeks.org/what-is-the-inline-function-in-javascript/
////////////


//// Functions are like objects. They can be different even if their contents are same because of reference inequality/////////
function factory() {
  return (a, b) => a + b;
}
const sum1 = factory();
const sum2 = factory();
sum1(1, 2); // => 3
sum2(1, 2); // => 3
sum1 === sum2; // => false     because factory() creates and returns new function object everytime it runs
sum1 === sum1; // => true
//////

/// to check if variable is object //
if (
    typeof yourVariable === 'object' &&
    !Array.isArray(yourVariable) &&
    yourVariable !== null
) {
    executeSomeCode();
}
//////