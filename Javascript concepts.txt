////async functions/////
they are executed as inline function to the statement before await statement
//////////////////////////////////


//////////////Method definitions in objects/////////////////////////

Whenver we define a function in class or object then it is called 'method'

const obj = {
  foo: function() {
    // ...
  },
  bar: function() {
    // ...
  }
}
You are now able to shorten this to:
const obj = {
  foo() {
    // ...
  },
  bar() {
    // ...
  }
}
////////////////////////////


/////OOPS concept///////////
CODE REUSABILITY is the reason behind INHERITANCE
To extend or inherit a class means to use its properties and methods
Object of child class can access public fields of super or extended class
///////////////////////////////////////////////

/////CLOSURES in JAVASCRIPT //////////

//// Inline functions //////////
Unlike normal function, they are created at runtime. For more info:
https://www.geeksforgeeks.org/what-is-the-inline-function-in-javascript/
////////////


//// Functions are like objects. They can be different even if their contents are same because of reference inequality/////////
function factory() {
  return (a, b) => a + b;
}
const sum1 = factory();
const sum2 = factory();
sum1(1, 2); // => 3
sum2(1, 2); // => 3
sum1 === sum2; // => false     because factory() creates and returns new function object everytime it runs
sum1 === sum1; // => true
//////

/// to check if variable is object //
if (
    typeof yourVariable === 'object' &&
    !Array.isArray(yourVariable) &&
    yourVariable !== null
) {
    executeSomeCode();
}
//////

//// throw ////
Function ends its execution at the line where either "throw" or "return" keyword is written 
And returns a value if return is used or returns error if throw is used
////////////

//// javascript arrays ///
JavaScript has no associative arrays, just objects. Even JavaScript arrays are basically just objects, just with the special thing that the keys are numbers (0,1,...).

So look at your code first:

var myArray = []; // Creating a new array object
myArray['a'] = 200; // Setting the attribute a to 200
myArray['b'] = 300; // Setting the attribute b to 300
It's important to understand that myArray['a'] = 200; is identical to myArray.a = 200;!
/////////////////