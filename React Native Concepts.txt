////////TO CREATE NEW PROJECT://///////
npx react-native init ProjectName
//////////////////////////////////////

/////// TO BUILD DEBUG apk ////////////
Make sure you have already directory android/app/src/main/assets/, if not create directory, after that create new file and save as index.android.bundle and put your file in like this android/app/src/main/assets/index.android.bundle
After that: 
npx react-native bundle --platform android --dev false --entry-file index.js --bundle-output android/app/src/main/assets/index.android.bundle --assets-dest android/app/src/main/res/

cd android && ./gradlew assembleDebug

Then you can get apk in app/build/outputs/apk/debug/app-debug.apk
//////////////////////////////////////////////////////////////////////////////

/////EXISTING REACT NATIVE PROJECTS copied from another system or from GUTHUB/////
1. Delete node_modules folder if it is present
2. yarn install OR npm install
3. ./gradlew clean
4. npx react-native start
5. npx react-native run-android
///////////////////////////////////////////

//////TO SEE if the mobile device is online and ready to install apk//////
adb devices
/////////////////

////If you change ANDROID MANIFEST XML FILE////////
uninstall app from device and build the app again
////////////

//////////ERROR: Expiring Daemon because JVM heap space is exhausted/////////////
Add the below lines into the gradle.properties file. Below memory size can be configured based on the RAM availability
org.gradle.daemon=true
org.gradle.jvmargs=-Xmx2560m
//////////////////////////////////////////////

/////CLEANING ReaCT nATIVE android project///////
cd android and ./gradlew clean
/////

/////TO INSTALL YARN package manager:///////
Open Windows powershell as administrator
run command: Set-ExecutionPolicy -Scope CurrentUser -ExecutionPolicy Unrestricted
/////////////////////////

/////NAVIGATION CONCEPTS//////////
Navigation actions are handled by current navigator and bubble up if couldn't be handled
Drawer Navigator screens are always rendered but their state can vary if those screens are navigators
reset action will make screens as it should
////

////Enabling SWIPE OR PAGING FEATURE IN SCROLLVIEW//////
pagingEnabled = {true}
When true, the scroll view stops on multiples of the scroll view's size when scrolling. This can be used for horizontal pagination.
Note: Vertical pagination is not supported on Android.
////////////////////////////////


////DIMENSIONS in react native//////
All dimensions in React Native are unitless, and represent density-independent pixels or points
There is no universal mapping from points to physical units of measurement. 
This means that a component with fixed dimensions might not have the same physical size, across different devices and screen sizes.
However, this difference is unnoticable for most use cases.
/////////////////////////////////////

//////Difference b/w Context API and Redux//////
Context - It re-renders all components whenever there is any update in the providerâ€™s value prop. It is mainly used to share not manage
Redux - It only re-render the updated components. It is used to share as well as manage
/////////////////////////////////////////////////

///// FLEXBOX ////////
flexGrow, flexShrink works in the direction of flexDirection

use flex only if you are using same values in flexGrow and flexShrink (only in the case where component is the one and only child on which u are applying these props)

Always try flex first in dividing the components. Then after, go with width or height percentage
///////////////////////////////////////////////

//////adjusting FONT SIZE according to SPACE////////
use properties:-
numberOfLines = {1}
adjustsFontSizeToFit = {true}

and use flexShrink:1 in container(s)

////////
If two texts are in one line and to ensure right one doesn't go outside of the view, 
1. use flex property or give width to them in percentage
2. use flexShrink: 1 to second item and use adjustFontSizeToFit = {true} prop to TEXT component
///////

/////<TEXT> props __ FONT/////////////

allowFontScaling: true(default) or false--- Specifies whether fonts should scale to respect Text Size accessibility settings means should it scale if user set font size from the device settings

adjustFontSizeToFit: true or false(default) ---Specifies whether fonts should be scaled down automatically to fit given style constraints. 
It works well with style: {flexShrink: 1 }

    ///lineHeight///
    It is the height of text component. By default it is little bigger than fontSize so as to make sufficient space for text. 
    It means by default text of text component has vertical padding

/////////

//////////////////////////////////////////////////////


/////Use pressable instead of TouchableWithoutFeedback because the later is not working well//////////////


///axios////
axios.get('/user/12345')
  .catch(function (error) {
    console.log(error) ///this is the string returned by the toString method of the error object.
    if (error.response) {
      // The request was made and the server responded with a status code
      // that falls out of the range of 2xx
      console.log(error.response.data);
      console.log(error.response.status);
      console.log(error.response.headers);
    } else if (error.request) {
      // The request was made but no response was received
      // `error.request` is an instance of XMLHttpRequest in the browser and an instance of
      // http.ClientRequest in node.js
      console.log(error.request);
    } else {
      // Something happened in setting up the request that triggered an Error
      console.log('Error', error.message);
    }
    console.log(error.config);
  });

///////////////////

////////React Native Picker///////////
label of picker.item must be a string otherwise app will crash
/////////////////////////////////

/////SCROLL VIEW//////
overflow: 'hidden' does not work in scroll view. so if u set border radius, children will overlap that when we scroll.
So solution is: wrap the scroll view in view and give it border radius and set overflow hidden
//////////////////


/////SHADOW_COLOR//////
This property will only work on Android API 28 and above. For similar functionality on lower Android APIs, use the elevation property.
////////////


///// Accessing Components///////
give prop like: ref = {abcRef}
to accesss it: abcRef.current      current property must be written to access components methods