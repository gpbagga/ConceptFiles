////////TO CREATE NEW PROJECT://///////
npx react-native init ProjectName
//////////////////////////////////////

/////// TO BUILD DEBUG apk ////////////
Make sure you have already directory android/app/src/main/assets/, if not create directory, after that create new file and save as index.android.bundle and put your file in like this android/app/src/main/assets/index.android.bundle
After that: 
npx react-native bundle --platform android --dev false --entry-file index.js --bundle-output android/app/src/main/assets/index.android.bundle --assets-dest android/app/src/main/res/

cd android && ./gradlew assembleDebug

Then you can get apk in app/build/outputs/apk/debug/app-debug.apk
//////////////////////////////////////////////////////////////////////////////

/////EXISTING REACT NATIVE PROJECTS copied from another system or from GUTHUB/////
1. Delete node_modules folder if it is present
2. yarn install OR npm install
3. ./gradlew clean
4. npx react-native start
5. npx react-native run-android
///////////////////////////////////////////

//////TO SEE if the mobile device is online and ready to install apk//////
adb devices
/////////////////

//// ERRORS //////
 Error: Reanimated 2 failed to create a worklet, maybe you forgot to add Reanimated's babel plugin?, js engine: hermes 
	yarn start --reset-cache
ERROR  Invariant Violation: Module AppRegistry is not a registered callable module (calling runApplication). A frequent cause of the error is that the application entry file path is incorrect.
some dependency for library is not installed so install that

ERROR: app is crashing by itself and no log of error 
	Solution: delete build folder in android/app 

////////////////



////If you change ANDROID MANIFEST XML FILE////////
uninstall app from device and build the app again
////////////

//////////ERROR: Expiring Daemon because JVM heap space is exhausted/////////////
Add the below lines into the gradle.properties file. Below memory size can be configured based on the RAM availability
org.gradle.daemon=true
org.gradle.jvmargs=-Xmx2560m
//////////////////////////////////////////////

/////CLEANING ReaCT nATIVE android project///////
cd android and ./gradlew clean
/////

/////TO INSTALL YARN package manager:///////
Open Windows powershell as administrator
run command: Set-ExecutionPolicy -Scope CurrentUser -ExecutionPolicy Unrestricted
/////////////////////////

//// when using flatlist your item of list should be pure component or should implement shouldComponentUpdate or else they will render a lot more time than expected//////
// in functional components , use React.memo(listItem)

/////NAVIGATION CONCEPTS//////////
Navigation actions are handled by current navigator and bubble up if couldn't be handled
Drawer Navigator screens are always rendered but their state can vary if those screens are navigators
reset action will make screens as it should
////

////Enabling SWIPE OR PAGING FEATURE IN SCROLLVIEW//////
pagingEnabled = {true}
When true, the scroll view stops on multiples of the scroll view's size when scrolling. This can be used for horizontal pagination.
Note: Vertical pagination is not supported on Android.
////////////////////////////////

//// SECURITY/STORING CREDENTIALS//////
Never store sensitive API keys in your app code. Anything included in your code could be accessed in plain text by anyone inspecting the app bundle./////////
DO NOT USE AsyncStorage TO STORE CREDENTIALS!
////////////////////////////////////

////DIMENSIONS in react native//////
All dimensions in React Native are unitless, and represent density-independent pixels or points
There is no universal mapping from points to physical units of measurement. 
This means that a component with fixed dimensions might not have the same physical size, across different devices and screen sizes.
However, this difference is unnoticable for most use cases.
/////////////////////////////////////

//////Difference b/w Context API and Redux//////
Context - It re-renders all components whenever there is any update in the providerâ€™s value prop. It is mainly used to share not manage
Redux - It only re-render the updated components. It is used to share as well as manage
/////////////////////////////////////////////////

///// FLEXBOX ////////
flexShrink property is very good to prevent overflow of content out of view

use flex only if you are using same values in flexGrow and flexShrink (only in the case where component is the one and only child on which u are applying these props)

Always try flex first in dividing the components. Then after, go with width or height percentage
///////////////////////////////////////////////

//////adjusting FONT SIZE according to SPACE////////
use properties:-
numberOfLines = {1}
adjustsFontSizeToFit = {true}

and use flexShrink:1 in container(s)

////////
If two texts are in one line and to ensure right one doesn't go outside of the view, 
1. use flex property or give width to them in percentage
2. use flexShrink: 1 to second item and use adjustFontSizeToFit = {true} prop to TEXT component
///////
/// useRef ////
"Refs provide a way to access DOM nodes or React elements created in the render method"
this is for react. it consists of div like components which are DOM nodes or React elements/components
////

///// accessing props or state values of previous render/////////
//custom hook
function usePrevious(value) {
  const ref = useRef();
  useEffect(() => {              // useEffect's effect will run after usePrevious function returns ref.current
    ref.current = value;
  });
  return ref.current;
}

const Component = (props) => {
    const {receiveAmount, sendAmount } = props
    const prevAmount = usePrevious({receiveAmount, sendAmount});
    useEffect(() => {
        if(prevAmount.receiveAmount !== receiveAmount) {
         // process here
        }
    }, [receiveAmount, sendAmount])
}
///////////////////////////////

/// setting same value of state will not cause rerender ////////////
/// since objects are always different so setting a {} everytime will cause rerender /////////
/// creating a forceUpdate function ///////
const [, updateState] = React.useState();
const forceUpdate = React.useCallback(() => updateState({}), []);
///////


/////<TEXT> props __ FONT/////////////

allowFontScaling: true(default) or false--- Specifies whether fonts should scale to respect Text Size accessibility settings means should it scale if user set font size from the device settings

adjustFontSizeToFit: true or false(default) ---Specifies whether fonts should be scaled down automatically to fit given style constraints. 
It works well with style: {flexShrink: 1 }

    ///lineHeight///
    It is the height of text component. By default it is little bigger than fontSize so as to make sufficient space for text. 
    It means by default text of text component has vertical padding

/////////

//////////////////////////////////////////////////////


/////Use pressable instead of TouchableWithoutFeedback because the later is not working well//////////////


///axios////
axios.get('/user/12345')
  .catch(function (error) {
    console.log(error) ///this is the string returned by the toString method of the error object.
    if (error.response) {
      // The request was made and the server responded with a status code
      // that falls out of the range of 2xx
      console.log(error.response.data);
      console.log(error.response.status);
      console.log(error.response.headers);
    } else if (error.request) {
      // The request was made but no response was received
      // `error.request` is an instance of XMLHttpRequest in the browser and an instance of
      // http.ClientRequest in node.js
      console.log(error.request);
    } else {
      // Something happened in setting up the request that triggered an Error
      console.log('Error', error.message);
    }
    console.log(error.config);
  });

///////////////////

////////React Native Picker///////////
label of picker.item must be a string otherwise app will crash
/////////////////////////////////

/////SCROLL VIEW//////
overflow: 'hidden' does not work in scroll view. so if u set border radius, children will overlap that when we scroll.
So solution is: wrap the scroll view in view and give it border radius and set overflow hidden
//////////////////


/////SHADOW_COLOR//////
This property will only work on Android API 28 and above. For similar functionality on lower Android APIs, use the elevation property.
////////////


///// Accessing Components///////
give prop like: ref = {abcRef}
to accesss it: abcRef.current      current property must be written to access components methods
//////////////////////////////////


//// Inline functions //////////
Unlike normal function, they are created at runtime. For more info:
https://www.geeksforgeeks.org/what-is-the-inline-function-in-javascript/
////////////


//// useCallback() /////
useCallback(callbackFun, deps): given the same dependency values deps, the hook returns the same function instance between renderings (aka memoization):

rendering creates new function objects:
function MyComponent() {

  // this function (object) will be created everytime MyComponent renders
  const handleClick = () => {
    // handle the click event
  };
  return <MyChild onClick={handleClick} />;
}

import { useCallback } from 'react';
function MyComponent() {
  
  // handleClick is the same function object between rerenderings
  const handleClick = useCallback(() => {
    console.log('Clicked!');
  }, []);
  // ...
}
handleClick variable has always the same callback function object between renderings of MyComponent.
But if the component which uses handleClick is small then Don't use useCallback() because small and light component does not cost performance if it is rendered on every render of parent component

/////////////////////////////////////////////////

///// useFocusEffect //////////
it is not same as useEffect but somewhat similar to it.
In useFocusEffect, The effect will run when screen comes to focus from unfocused state and whenever the dependencies passed to React.useCallback change, i.e. it'll run on initial render (if the screen is focused) as well as on subsequent renders if the dependencies have changed. If you don't wrap your effect in React.useCallback, the effect will run every render if the screen is focused.
In useEffect, the effect will run everytime irrespective of change in dependencies in useCallback.
/////////////////////////////////////

///// REDUX TOOLKIT /////
emptyUserSelection: (state, action) => {

      // state = initialState or {...initialState}  // this will not work
      for(const key in state){
        state[key] = initialState[key]
      }
      
},
we cannot change reference of state object but we can change its content by mutating its properties.